plugins {
    id 'com.android.application' apply false
    id 'org.jetbrains.kotlin.multiplatform'
}

def localProperties = new Properties()
def localPropertiesFile = file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader { localProperties.load(it) }
}

// could be adapted to check if there is an Android SDK, and not using it if not needed
boolean useAndroid = (localProperties.containsKey("sdk.dir") || System.getenv('ANDROID_HOME') != null)

if (useAndroid) {
    apply plugin: "com.android.application"
}
else {
    println "Not using Android SDK because we are on macos CI or because it was requested by the user."
    apply plugin:"java"
}

group = 'houtbecke.rs.mpp'
version = 1.0

if (useAndroid) {
    android {

        compileSdkVersion 27

        defaultConfig {

            applicationId "houtbecke.rs.mpp.android"
            minSdkVersion 15
            targetSdkVersion 27
            versionCode 1
            versionName "1.0"
            testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        }

        packagingOptions {
            exclude 'META-INF/main.kotlin_module'
        }

        buildTypes {
            release {
                minifyEnabled false
                proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            }
        }
    }

    // below are the dependencies for the Android app
    // common/iOS dependencies are inside the kotlin sourceset declarations
    dependencies {

        implementation 'com.android.support:appcompat-v7:27.1.1'

        testImplementation 'junit:junit:4.12'
        testImplementation "org.jetbrains.kotlin:kotlin-test:$kotlin_version"
        testImplementation "org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version"

        androidTestImplementation 'junit:junit:4.12'
        androidTestImplementation "org.jetbrains.kotlin:kotlin-test:$kotlin_version"
        androidTestImplementation "org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version"

        androidTestImplementation "com.android.support.test:runner:1.0.2"
        androidTestImplementation "com.android.support.test.espresso:espresso-core:3.0.2"

    }
}

kotlin {
    targets {
        // androidLib is bugged at the moment
        if (useAndroid)
            fromPreset(presets.android, 'android')

        def buildForDevice = project.findProperty("device")?.toBoolean() ?: false
        def iosPreset = (buildForDevice) ? presets.iosArm64 : presets.iosX64
        fromPreset(iosPreset, 'ios') {
            compilations.main.outputKinds('FRAMEWORK')
        }
    }

    sourceSets {

        commonMain {

            dependencies {
                implementation "org.jetbrains.kotlin:kotlin-stdlib-common:$kotlin_version"
                implementation "io.ktor:ktor-client:$ktor_version"

                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core-common:1.0.0-RC1"
                implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime-common:0.8.2-rc13"

            }
        }

        commonTest {
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-test-common'
                implementation 'org.jetbrains.kotlin:kotlin-test-annotations-common'
            }
        }

        if (useAndroid) {
            androidMain {
                dependencies {
                    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
                    implementation "io.ktor:ktor-client-android:1.0.0-beta-1"
                }
            }
        }

        iosMain {
            dependencies {
                implementation "io.ktor:ktor-client-ios:1.0.0-beta-1"
                implementation "io.ktor:ktor-client-json-ios:1.0.0-beta-1"
            }
        }
    }
}

task copyFramework {
    def buildType = project.findProperty("kotlin.build.type") ?: "DEBUG"
    dependsOn "link${buildType.toLowerCase().capitalize()}FrameworkIos"

    doLast {
        def srcFile = kotlin.targets.ios.compilations.main.getBinary("FRAMEWORK", buildType)
        def targetDir = getProperty("configuration.build.dir")
        println "targetDir: $targetDir"
        copy {
            from srcFile.parent
            into targetDir
            include 'mpp.framework/**'
            include 'mpp.framework.dSYM'
        }
    }
}

task iosTest {
    def device = project.findProperty("iosDevice")?.toString() ?: "iPhone 8"
    dependsOn 'linkTestDebugExecutableIos'
    group = JavaBasePlugin.VERIFICATION_GROUP
    description = "Runs tests for target 'ios' on an iOS simulator"

    doLast {
        def binary = kotlin.targets.ios.compilations.test.getBinary('EXECUTABLE', 'DEBUG')
        exec {
            commandLine 'xcrun', 'simctl', 'spawn', device, binary.absolutePath
        }
    }
}


// output test results to console
tasks.withType(Test) {
    testLogging {
        events "started", "passed", "skipped", "failed"
    }


    // https://stackoverflow.com/a/36130467/2338613
    afterSuite { desc, result ->
        if (!desc.parent) { // will match the outermost suite
            def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
            def startItem = '|  ', endItem = '  |'
            def repeatLength = startItem.length() + output.length() + endItem.length()
            println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
        }
    }
}
