plugins {
    id 'com.android.application' apply false
    id "org.jetbrains.kotlin.kapt" apply false
    id 'org.jetbrains.kotlin.multiplatform'

}

boolean useAndroid = System.properties.androidSdkFound

if (useAndroid) {
    apply plugin: "com.android.application"
    apply plugin: 'com.google.gms.google-services'
    apply plugin: 'kotlin-android-extensions'
    apply plugin: 'kotlin-kapt'

}
else {
    println "Not using applying the Android Plugin because the Android SDK was not found.\n" +
            "If you are developing for iOS only you can ignore this warning."
    apply plugin:"java"
}

group = 'houtbecke.rs.mpp'
version = 1.0




kotlin {
    targets {
        // androidLib is bugged at the moment
        if (useAndroid)
            fromPreset(presets.android, 'android')

        def buildForDevice = false
                //project.findProperty("device")?.toBoolean() ?: false

        println "Building iOS for device: $buildForDevice"

        def iosPreset = (buildForDevice) ? presets.iosArm64 : presets.iosX64
        fromPreset(iosPreset, 'ios') {
            compilations.main.outputKinds('FRAMEWORK')
        }
    }

    sourceSets {

        commonMain {

            dependencies {
                implementation "org.jetbrains.kotlin:kotlin-stdlib-common:$kotlin_version"
                implementation "io.ktor:ktor-client:$ktor_version"

                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core-common:1.0.0-RC1"
                implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime-common:0.8.2-rc13"

            }
        }

        commonTest {
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-test-common'
                implementation 'org.jetbrains.kotlin:kotlin-test-annotations-common'
            }
        }


        if (useAndroid) {
            androidMain {
                dependencies {
                    implementation 'androidx.appcompat:appcompat:1.0.0'
                    implementation 'androidx.lifecycle:lifecycle-extensions:2.0.0'
                    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
                    implementation 'androidx.recyclerview:recyclerview:1.0.0'
                    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
                    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
                    implementation "io.ktor:ktor-client-android:$ktor_version"
                    implementation 'com.google.firebase:firebase-firestore:17.1.2'
                    implementation 'com.google.firebase:firebase-crash:16.2.1'
                    implementation 'com.google.firebase:firebase-auth:16.0.5'
                    implementation 'com.google.firebase:firebase-core:16.0.4'
                    implementation 'com.google.firebase:firebase-storage:16.0.4'

                }
            }
        }

        iosMain {
            dependencies {
                implementation "io.ktor:ktor-client-ios:$ktor_version"
                implementation "io.ktor:ktor-client-json-ios:$ktor_version"
            }
        }
    }
}

if (useAndroid) {
    android {


        compileSdkVersion 28

        defaultConfig {

            applicationId "houtbecke.rs.mpp.android"
            minSdkVersion 21
            targetSdkVersion 28
            versionCode 1
            versionName "1.0"
            testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        }

        packagingOptions {
            exclude 'META-INF/main.kotlin_module'
        }

        buildTypes {
            release {
                minifyEnabled false
                proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            }
        }

        dataBinding {
            enabled = true
        }
    }

    // common/iOS dependencies are inside the kotlin sourceset declarations


    // Android specific declarations are here, the rest are in the sourcesets below
    dependencies {

        androidTestImplementation "com.android.support.test:runner:1.0.2"
        androidTestImplementation "com.android.support.test.espresso:espresso-core:3.0.2"
        androidTestImplementation 'junit:junit:4.12'
        androidTestImplementation "org.jetbrains.kotlin:kotlin-test:$kotlin_version"
        androidTestImplementation "org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version"

        testImplementation 'junit:junit:4.12'
        testImplementation "org.jetbrains.kotlin:kotlin-test:$kotlin_version"
        testImplementation "org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version"

        kapt "androidx.databinding:compiler:3.2.0-alpha11"
    }
}


task copyFramework {
    def buildType = project.findProperty("kotlin.build.type") ?: "DEBUG"
    dependsOn "link${buildType.toLowerCase().capitalize()}FrameworkIos"

    doLast {
        def srcFile = kotlin.targets.ios.compilations.main.getBinary("FRAMEWORK", buildType)
        def targetDir = getProperty("configuration.build.dir")
        println "targetDir: $targetDir"
        copy {
            from srcFile.parent
            into targetDir
            include 'mpp.framework/**'
            include 'mpp.framework.dSYM'
        }
    }
}

task iosTest {
    def device = project.findProperty("iosDevice")?.toString() ?: "iPhone 8"
    dependsOn 'linkTestDebugExecutableIos'
    group = JavaBasePlugin.VERIFICATION_GROUP
    description = "Runs tests for target 'ios' on an iOS simulator"

    doLast {
        def binary = kotlin.targets.ios.compilations.test.getBinary('EXECUTABLE', 'DEBUG')
        exec {
            commandLine 'xcrun', 'simctl', 'spawn', device, binary.absolutePath
        }
    }
}

// output test results to console
tasks.withType(Test) {
    testLogging {
        events "started", "passed", "skipped", "failed"
    }

    // https://stackoverflow.com/a/36130467/2338613
    afterSuite { desc, result ->
        if (!desc.parent) { // will match the outermost suite
            def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
            def startItem = '|  ', endItem = '  |'
            def repeatLength = startItem.length() + output.length() + endItem.length()
            println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
        }
    }
}


